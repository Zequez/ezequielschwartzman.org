---
import "./base.css";
import { colors } from "@/lib/chroma";
import LayoutComponents from "./LayoutComponents.astro";
import config from "../config.yml";

const { title, frontmatter, markdown } = Astro.props;

const wrapForMarkdown = frontmatter?.markdown || markdown;

let givenTitle = title || frontmatter?.title;
let resolvedTitle = givenTitle ? `${givenTitle} | ${config.baseTitle}` : config.baseTitle;

const pathname = new URL(Astro.request.url).pathname;
const section = pathname.slice(1).split("/")[0];
const color = colors[section as keyof typeof colors] || colors.about;
---

<!DOCTYPE html>
<html lang={config.language}>
  <head>
    <style define:vars={{ mainColor: color }}></style>
    <meta charset="UTF-8" />
    <meta name="description" content={config.baseDescription} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/jpg" href={config.favicon} />
    <meta property="og:image" content={config.avatar} />
    <meta name="generator" content={Astro.generator} />
    <title>{resolvedTitle}</title>
    <!-- <style set:html={`:root {--main-color: ${color};}`}></style>
    <style>
      :root {
        --main-color: oklch(75% 0.3 180);
      }
    </style> -->
  </head>
  <body class="bg-gray-50">
    <div class="flex w-full min-h-screen">
      <LayoutComponents />
      <div class={`text-black/80  flex-grow order-1 sm:pr-56 pb-12 sm:pb-0 relative`}>
        {
          wrapForMarkdown ? (
            <div class="markdown mx-auto p-4 sm:p-8">
              <slot />
            </div>
          ) : (
            <slot />
          )
        }
      </div>
    </div>
  </body>
</html>
<style is:global></style>
