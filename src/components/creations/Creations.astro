---
import { CollectionEntry, getCollection } from "astro:content";

const creations = await getCollection("creations");

function resolveDate (e: CollectionEntry<"creations">) {
  if (e.data.date) return e.data.date;
  else if (e.data.dateStart && e.data.dateEnd)
    return new Date((e.data.dateStart.getTime() + e.data.dateEnd.getTime()) / 2 );
  else if (e.data.dateStart && !e.data.dateEnd) return e.data.dateStart;
  else if (e.data.dateEnd && !e.data.dateStart) return e.data.dateEnd;
  else return new Date();
}

const sortedCreations = creations.sort((a, b) => {
  return resolveDate(b).getTime() - resolveDate(a).getTime();
});


const creationTypeToText = (creationType: string) => {
  switch (creationType) {
    case "video":
      return "Video";
    case "collaboration":
      return "Collaboration";
    case "software":
      return "Software";
    case "writing":
      return "Writing";
    default:
      return "Other";
  }
};

const langToFlag = (lang: string) =>{
  switch (lang) {
    case 'en': return "ðŸ‡¬ðŸ‡§";
    case 'es': return "ðŸ‡¦ðŸ‡·";
  }
}

const langToText = (lang: string) =>{
  switch (lang) {
    case 'en': return "English";
    case 'es': return "EspanÌƒol";
  }
}

function timeAgoInMoons (date: Date) {
  const diff = new Date().getTime() - date.getTime();
  return Math.floor(diff / (1000 * 60 * 60 * 24 * 28));
}

function timeAgoInWords (date: Date) {
  const moons = timeAgoInMoons(date);
  if (moons === 0) {
    return "most recently";
  } else if (moons === 1) {
    return "last moon";
  } else if (moons >= 2 && moons < 13) {
    return `${moons} moons ago`;
  } else if (moons >= 13) {
    const solars =  Math.floor(moons / 13);
    const rest = moons % 13;
    if (solars < 3) {
      return `${solars}.${rest} solars.moons ago`;
    } else {
      return `${solars} solars ago`;
    }
  } else {
    return '???';
  }
}

const groupedByTimeAgoInWords = sortedCreations.reduce((acc, curr) => {
  const words = timeAgoInWords(resolveDate(curr));
  if (!acc[words]) {
    acc[words] = [];
  }
  acc[words].push(curr);
  return acc;
}, {} as { [key: string]: CollectionEntry<"creations">[] });

function withLatestVersion (creation: CollectionEntry<"creations">, cb: (version: string) => any) {
  return creation.data.releases[0]?.version ? cb(creation.data.releases[0].version) : null;

}

---

<div class="p-4 sm:p-8">
  <div class="markdown">
    <h1>Creations</h1>
  </div>
  {Object.entries(groupedByTimeAgoInWords).map(([group, creations], i) =>
    <div class="text-4xl italic font-thin tracking-wider mb-12">...{group}</div>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-12 mb-12">
    {
      creations.map((creation) => (
        <div class="relative rounded-md shadow-sm bg-white rounded-b-md border border-gray-300">
          <div class="absolute -top-2 left-2 px-2 py-1 bg-gray-100 border border-gray-400 rounded-md uppercase text-sm tracking-wider font-semibold" title={creationTypeToText(creation.data.creationType)}>
              {creationTypeToText(creation.data.creationType)}
          </div>
          {withLatestVersion(creation, (version) => <div class="absolute -top-2 right-2 px-2 py-1 bg-gray-100 border border-gray-400 rounded-md text-sm tracking-wider font-semibold" title={creationTypeToText(creation.data.creationType)}>
              {version.match(/^[0-9]/) ? `v${version}` : version}
          </div>)}

          <a href={`/creations/${creation.slug}`} class="flex whitespace-nowrap items-center h-20">
            <h2 class="flex-grow rounded-t-md bg-white px-2 py-2 text-center text-2xl font-light text-ellipsis overflow-hidden font-serif">{creation.data.title}</h2>
          </a>
          <div>
            <a href={`/creations/${creation.slug}`} class="block aspect-video w-full">
              <img src={creation.data.thumbnail} class="w-full h-full object-cover" />
            </a>
            <div class="h-4 px-2 hidden">
              <div class="flex -mt-4 h-8 text-black/70 tracking-wider">
                <div class="flex justify-end flex-grow space-x-2">
                  {creation.data.language.map((lang) =>
                    <div class="flex items-center bg-gray-50 shadow-sm rounded-md py-1 px-2 border border-gray-200 font-semibold uppercase">
                      <span class="text-3xl mr-2">{langToFlag(lang)}</span>
                      <span class="text-sm">{langToText(lang)}</span></div>
                  )}
                </div>
            </div>
            </div>
            <div class="relative p-8">
              <div class="font-light line-clamp-2 overflow-hidden text-black/50">
                {creation.data.description}
              </div>
            </div>
          </div>
        </div>
      ))
    }
  </div>
  )}
</div>