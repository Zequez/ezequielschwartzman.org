---
import { getCollection } from "astro:content";
import Layout from "@/layouts/Layout.astro";

export async function getStaticPaths() {
  const creationsEntries = await getCollection("creations");
  return creationsEntries.map((creation) => ({
    params: { slug: creation.slug },
    props: { creation },
  }));
}
// 2. When it's time to render, you can get the entry directly from the prop
const { creation } = Astro.props;
const { Content } = await creation.render();
---

<Layout title={creation.data.title}>
  <div class="pt-0 max-w-screen-lg mx-auto">
    <h1 class="text-4xl text-center mb-8 font-light px-4 font-serif">{creation.data.title}</h1>
    {
      creation.data.iframe ? (
        <div
          id="iframe-container"
          class:list={["w-full flex-shrink-0 flex items-center justify-center mb-8"]}
          style={{ display: "none" }}
        >
          <div class="w-full">
            <iframe
              maybe-src={creation.data.iframe}
              class:list={[
                "w-full rounded-md border border-black/10 mx-auto aspect-video flex-shrink-0",
              ]}
              style={creation.data.iframeStyle}
              sandbox="allow-scripts allow-same-origin"
            />
            <div class="flex justify-center flex-col items-center">
              <div class="bg-red-400 text-white font-semibold px-2 py-1 rounded-b-md text-xl border border-red-500 border-t-0 text-shadow-sm">
                LIVE APP
              </div>
            </div>
          </div>
        </div>
      ) : null
    }
    <script>
      const iframeContainer = document.getElementById("iframe-container");
      const iframe = document.querySelector("iframe");
      let showing = false;
      if (iframeContainer) {
        function processIframeShowing() {
          if (window.innerWidth < 768) {
            if (showing) {
              showing = false;
              iframeContainer.style.display = "none";
              iframe.setAttribute("src", "");
            }
          } else {
            if (!showing) {
              showing = true;
              iframeContainer.style.display = "flex";
              iframe.setAttribute("src", iframe.getAttribute("maybe-src"));
            }
          }
        }
        window.addEventListener("resize", processIframeShowing);
        processIframeShowing();
      }
    </script>
    {
      creation.data.link || creation.data.sourceLink ? (
        <div class="flex flex-wrap mb-4 items-center justify-center">
          {[
            ["Access", creation.data.link],
            ["Source code", creation.data.sourceLink],
          ].map(([text, link]) =>
            link ? (
              <a
                href={link}
                target="_blank"
                class="mb-4 bg-blue-100 border border-blue-300 rounded-md text-blue-500 group mx-2 mb-4 flex flex-col sm:flex-row"
              >
                <strong class="inline-block text-center text-base sm:text-xl font-semibold bg-blue-200 sm:rounded-l-md text-blue-500 px-2 py-1 sm:py-2 sm:px-8 sm:border-r border-blue-300">
                  {text}
                </strong>
                <span class="px-2 py-1 group-hover:underline text-xs sm:text-base">{link}</span>
              </a>
            ) : null
          )}
        </div>
      ) : null
    }

    <div class="text-lg font-light max-w-screen-lg mx-auto px-4 pb-8">
      <div class="markdown">
        <Content />
      </div>
    </div>
    {
      creation.data.tags.length ? (
        <div class="flex justify-center items-center flex-wrap mb-4 w-full">
          {creation.data.tags.map((tag: string) => (
            <span class="bg-gray-400/80 font-bold text-white uppercase tracking-wider px-2 py-1 mr-2 mb-2 rounded-md">
              {tag}
            </span>
          ))}
        </div>
      ) : null
    }
  </div>
</Layout>
